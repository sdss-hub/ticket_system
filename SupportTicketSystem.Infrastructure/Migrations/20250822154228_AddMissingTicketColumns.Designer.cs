// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SupportTicketSystem.Infrastructure.Data;

#nullable disable

namespace SupportTicketSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250822154228_AddMissingTicketColumns")]
    partial class AddMissingTicketColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.AIInsight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Confidence")
                        .HasPrecision(3, 2)
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("InsightType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("InsightType");

                    b.HasIndex("TicketId");

                    b.ToTable("AIInsights", null, t =>
                        {
                            t.HasCheckConstraint("CK_AIInsight_Confidence", "Confidence >= 0.0 AND Confidence <= 1.0");
                        });
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.AgentSkill", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProficiencyLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.HasKey("AgentId", "SkillId");

                    b.HasIndex("AgentId");

                    b.HasIndex("SkillId");

                    b.ToTable("AgentSkills", null, t =>
                        {
                            t.HasCheckConstraint("CK_AgentSkill_ProficiencyLevel", "ProficiencyLevel >= 1 AND ProficiencyLevel <= 5");
                        });
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UploadedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("TicketId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Attachments", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.SystemConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConfigKey")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SystemConfigurations", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("#007bff");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AIAnalysis")
                        .HasColumnType("JSON");

                    b.Property<int?>("AssignedAgentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignmentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignmentReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessImpactData")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerFeedback")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerSatisfactionScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EscalatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EscalatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EscalationReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FirstResponseAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FirstResponseDeadline")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEscalated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ResolutionDeadline")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAgentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EscalatedById");

                    b.HasIndex("Priority");

                    b.HasIndex("Status");

                    b.HasIndex("TicketNumber")
                        .IsUnique();

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.TicketComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketComments", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.TicketHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("JSON");

                    b.Property<string>("NewValue")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValue")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketHistory", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.TicketTag", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("TicketId", "TagId");

                    b.HasIndex("TagId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketTags", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileSettings")
                        .HasColumnType("JSON");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.AIInsight", b =>
                {
                    b.HasOne("SupportTicketSystem.Core.Entities.Ticket", "Ticket")
                        .WithMany("AIInsights")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.AgentSkill", b =>
                {
                    b.HasOne("SupportTicketSystem.Core.Entities.User", "Agent")
                        .WithMany("AgentSkills")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportTicketSystem.Core.Entities.Skill", "Skill")
                        .WithMany("AgentSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Attachment", b =>
                {
                    b.HasOne("SupportTicketSystem.Core.Entities.TicketComment", "Comment")
                        .WithMany("Attachments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SupportTicketSystem.Core.Entities.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SupportTicketSystem.Core.Entities.User", "UploadedBy")
                        .WithMany("Attachments")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Ticket");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Category", b =>
                {
                    b.HasOne("SupportTicketSystem.Core.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.SystemConfiguration", b =>
                {
                    b.HasOne("SupportTicketSystem.Core.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Ticket", b =>
                {
                    b.HasOne("SupportTicketSystem.Core.Entities.User", "AssignedAgent")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedAgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SupportTicketSystem.Core.Entities.Category", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SupportTicketSystem.Core.Entities.User", "Customer")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SupportTicketSystem.Core.Entities.User", "EscalatedBy")
                        .WithMany()
                        .HasForeignKey("EscalatedById");

                    b.Navigation("AssignedAgent");

                    b.Navigation("Category");

                    b.Navigation("Customer");

                    b.Navigation("EscalatedBy");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.TicketComment", b =>
                {
                    b.HasOne("SupportTicketSystem.Core.Entities.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportTicketSystem.Core.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.TicketHistory", b =>
                {
                    b.HasOne("SupportTicketSystem.Core.Entities.Ticket", "Ticket")
                        .WithMany("History")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportTicketSystem.Core.Entities.User", "User")
                        .WithMany("HistoryEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.TicketTag", b =>
                {
                    b.HasOne("SupportTicketSystem.Core.Entities.Tag", "Tag")
                        .WithMany("TicketTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupportTicketSystem.Core.Entities.Ticket", "Ticket")
                        .WithMany("TicketTags")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Skill", b =>
                {
                    b.Navigation("AgentSkills");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Tag", b =>
                {
                    b.Navigation("TicketTags");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.Ticket", b =>
                {
                    b.Navigation("AIInsights");

                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("History");

                    b.Navigation("TicketTags");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.TicketComment", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("SupportTicketSystem.Core.Entities.User", b =>
                {
                    b.Navigation("AgentSkills");

                    b.Navigation("AssignedTickets");

                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("CreatedTickets");

                    b.Navigation("HistoryEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
